{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pr",
				"process_training_data	function"
			],
			[
				"load",
				"load_json_feature_file	function"
			],
			[
				"web",
				"web_crawl〔module〕"
			],
			[
				"class",
				"classifier〔variable〕"
			],
			[
				"cla",
				"classifier_creation"
			],
			[
				"sys",
				"system	function"
			],
			[
				"S",
				"Spider"
			],
			[
				"bay",
				"bayesian_naive	module"
			],
			[
				"clas",
				"classifier	module"
			],
			[
				"tra",
				"training_count	statement"
			],
			[
				"train",
				"training_label"
			],
			[
				"raw",
				"raw_text	statement"
			],
			[
				"fi",
				"fit	function"
			],
			[
				"pro",
				"process_raw_data	function"
			],
			[
				"fit",
				"fit_transform	function"
			],
			[
				"del",
				"delimiter	param"
			],
			[
				"save",
				"savetxt	function"
			],
			[
				"data",
				"data_np	statement"
			],
			[
				"Da",
				"Data	module"
			],
			[
				"get",
				"get_cluster	function"
			],
			[
				"war",
				"ward_labels	statement"
			],
			[
				"a",
				"append	function"
			],
			[
				"cl",
				"cluster_objects_vectors	statement"
			],
			[
				"Sto",
				"StockCluster	class"
			],
			[
				"St",
				"StockCluster	class"
			],
			[
				"Stoc",
				"StockCluster	module"
			],
			[
				"vol",
				"vol_ar	statement"
			],
			[
				"A",
				"AgglomerativeClustering"
			],
			[
				"In",
				"IndexError	class"
			],
			[
				"sto",
				"stock_price	statement"
			],
			[
				"st",
				"stock_price	statement"
			],
			[
				"C",
				"CBasePile	class"
			],
			[
				"os",
				"ostream"
			],
			[
				"FI",
				"FIFOimp	class"
			],
			[
				"in",
				"index_to_pop	int"
			],
			[
				"p",
				"pprint	function"
			],
			[
				"all",
				"allclose	function"
			],
			[
				"arr",
				"assert_array_almost_equal	function"
			],
			[
				"assert_e",
				"assert_almost_equal	function"
			],
			[
				"check",
				"check_sol	statement"
			],
			[
				"point",
				"points_c	param"
			],
			[
				"poin",
				"points_r	param"
			],
			[
				"po",
				"points_r	param"
			],
			[
				"poi",
				"points_set_a	param"
			],
			[
				"f",
				"friday	function"
			],
			[
				"star",
				"start_get_true_val	function"
			],
			[
				"sta",
				"start_predict	function"
			],
			[
				"aff",
				"affichemajuscule(const PiledeChar &pile)	void"
			],
			[
				"m",
				"mPile	char *"
			],
			[
				"Pil",
				"PiledeChar	constructor"
			],
			[
				"Pile",
				"PileChar"
			],
			[
				"Pi",
				"PiledeChar	class"
			],
			[
				"shif",
				"array_shift"
			],
			[
				"array",
				"array_shift"
			],
			[
				"to",
				"today_str	statement"
			],
			[
				"cls",
				"cls_point_val	statement"
			],
			[
				"tmr",
				"tmr_str	statement"
			],
			[
				"tar",
				"target_label"
			],
			[
				"target",
				"target_label	statement"
			],
			[
				"p_",
				"p_26	statement"
			],
			[
				"open",
				"open_point	statement"
			],
			[
				"K",
				"KNeighborsRegressor	class"
			],
			[
				"con",
				"convert_data_to_array"
			],
			[
				"next",
				"next_node	statement"
			],
			[
				"cat",
				"catlist	function"
			],
			[
				"max",
				"max_prob	statement"
			],
			[
				"prob_ca",
				"prob_cat_given_doc"
			],
			[
				"we",
				"weightedprob	function"
			],
			[
				"wei",
				"weighted"
			],
			[
				"fe",
				"features_count"
			],
			[
				"fea",
				"features_count	function"
			],
			[
				"add",
				"addcatcount	function"
			],
			[
				"uni",
				"uniqe_word_list	statement"
			],
			[
				"wor",
				"word	forstmt"
			],
			[
				"sol",
				"solution	statement"
			],
			[
				"cu",
				"current_cost	statement"
			],
			[
				"co",
				"cost_after_displacement	statement"
			],
			[
				"s",
				"schedulecost	function"
			],
			[
				"current",
				"current_cost"
			],
			[
				"solu",
				"solution_deplaced	statement"
			],
			[
				"ran",
				"randint	statement"
			],
			[
				"ra",
				"randomhillclimbing"
			],
			[
				"bes",
				"best_solution	statement"
			],
			[
				"sch",
				"schedulecost	function"
			],
			[
				"rand",
				"random_sol	statement"
			],
			[
				"flight",
				"flightschedule	function"
			],
			[
				"time",
				"time_arrival	statement"
			],
			[
				"tim",
				"time_depart	statement"
			],
			[
				"des",
				"destination	statement"
			],
			[
				"ce",
				"centroid_matched〔variable〕"
			],
			[
				"best",
				"best_match〔variable〕"
			],
			[
				"blog",
				"blogname"
			],
			[
				"pp",
				"pprint〔module〕"
			],
			[
				"centr",
				"centroid_group〔variable〕"
			],
			[
				"av",
				"average_sum	statement"
			],
			[
				"line",
				"line_belong_to"
			],
			[
				"la",
				"last_match	statement"
			],
			[
				"be",
				"best_match	statement"
			],
			[
				"range",
				"range_min_max	statement"
			],
			[
				"k",
				"kclustering	function"
			],
			[
				"min",
				"min_pair	statement"
			],
			[
				"ne",
				"new_group	statement"
			],
			[
				"id",
				"id_current_group	statement"
			],
			[
				"gr",
				"groupe"
			],
			[
				"column",
				"column_name	statement"
			],
			[
				"ap",
				"append"
			],
			[
				"sock",
				"sock_destination	int"
			],
			[
				"soc",
				"sock_destination	int"
			],
			[
				"Ini",
				"Init_Timer(int f)	void"
			],
			[
				"I",
				"Init_Timer0()	void"
			],
			[
				"GPIO_",
				"GPIO_PORTE_AHB_DEN_R"
			],
			[
				"brea",
				"breaking	int"
			],
			[
				"buff",
				"buffer_recv	char [255]"
			],
			[
				"print",
				"printf(const char *restrict __format, ...)	int"
			],
			[
				"socket_con",
				"socket_connectee	int"
			],
			[
				"si",
				"sin_addr	struct in_addr"
			],
			[
				"se",
				"semaid"
			],
			[
				"ms",
				"msg_id	int"
			],
			[
				"IPC",
				"IPC_CREAT	Macro"
			],
			[
				"SIGUS",
				"SIGUSR2	Macro"
			],
			[
				"inc",
				"include <header>	KeyWord"
			],
			[
				"arg",
				"argv	char **"
			],
			[
				"SIG",
				"SIGUSR1	Macro"
			],
			[
				"sign",
				"signal_handler"
			],
			[
				"sig",
				"signal_handler(int signum)	void"
			],
			[
				"SIGUSR",
				"SIGUSR1	Macro"
			],
			[
				"cal",
				"calculate_fibonacci"
			],
			[
				"ca",
				"calculate_fibonacci"
			]
		]
	},
	"buffers":
	[
		{
			"file": "classifier/bayesian_naive.py",
			"settings":
			{
				"buffer_size": 1636,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from classifier import bayesian_naive as bayes\n\n\nclass Test_Classifier:\n\n    def test_json_parsing(self):\n        data = bayes.load_json_feature_file('web_crawl/result.jl')\n        assert len(data) > 0\n\n    def test_process_training_data(self):\n        data = bayes.load_json_feature_file('web_crawl/result.jl')\n        labels = [1] * len(data)\n        bag_of_words, labels = bayes.process_training_data(data, labels)\n        assert bag_of_words.shape[0] == len(labels)\n\n    def test_load_classifier(self):\n    	bayes_classifier=bayes.load_classifier()\n    	assert b\n",
			"file": "test.py",
			"file_size": 553,
			"file_write_time": 131030407803276816,
			"settings":
			{
				"buffer_size": 567,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/tung/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
			"settings":
			{
				"buffer_size": 197,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 150.0,
		"last_filter": "Package Control: ins",
		"selected_items":
		[
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: In",
				"Package Control: Install Package"
			],
			[
				"isntall",
				"Package Control: Install Package"
			]
		],
		"width": 555.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"focus_side_bar",
			"sublime.log_commands(True)",
			"sublime.log_commands(False)",
			"sublime.log_commands(True)",
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/tung/Python_Project/text_classifier",
		"/home/tung/Python_Project/text_classifier/classifier",
		"/home/tung/Python_Project/text_classifier/web_crawl"
	],
	"file_history":
	[
		"/home/tung/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/tung/Python_Project/text_classifier/launch_crawling.py",
		"/home/tung/Python_Project/text_classifier/training_module/__init__.py",
		"/home/tung/Python_Project/text_classifier/training_module/bayes_naive_training.py",
		"/home/tung/Python_Project/text_classifier/web_crawl/settings.py",
		"/home/tung/Python_Project/text_classifier/web_crawl/web_crawl/spiders/spider.py",
		"/home/tung/Python_Project/text_classifier/web_crawl/launch_crawling.py",
		"/home/tung/Python_Project/text_classifier/abc.py",
		"/home/tung/Python_Project/text_classifier/web_crawl/result.jl",
		"/home/tung/Python_Project/text_classifier/web_crawl/__init__.py",
		"/home/tung/Python_Project/text_classifier/web_crawl/abc.py",
		"/home/tung/Python_Project/text_classifier/test_crawler.py",
		"/home/tung/Python_Project/text_classifier/web_crawl/web_crawl/settings.py",
		"/home/tung/Python_Project/text_classifier/web_crawl/web_crawl/items.py",
		"/home/tung/Python_Project/text_classifier/web_crawl/web_crawl/pipelines.py",
		"/home/tung/Python_Project/text_classifier/web_crawl/result.json",
		"/home/tung/Python_Project/text_classifier/web_crawl/result.xml",
		"/home/tung/Python_Project/text_classifier/web_crawl/result.jsonl",
		"/home/tung/Python_Project/text_classifier/web_crawl/items.json",
		"/home/tung/Python_Project/text_classifier/web_crawl/items.jl",
		"/home/tung/Python_Project/text_classifier/web_crawl/items.xml",
		"/home/tung/Python_Project/text_classifier/web_crawl/items.csv",
		"/home/tung/Python_Project/text_classifier/test.py",
		"/home/tung/Python_Project/text_classifier/classifier/bayesian_naive.py",
		"/home/tung/Python_Project/text_classifier/crawler/crawler/items.py",
		"/home/tung/Python_Project/text_classifier/crawler/crawler/pipelines.py",
		"/home/tung/Python_Project/text_classifier/crawler/scrapy.cfg",
		"/home/tung/Python_Project/text_classifier/crawler/crawler/settings.py",
		"/home/tung/Python_Project/text_classifier/crawler/crawler/spiders/spider.py",
		"/home/tung/Python_Project/text_classifier/data_crawling.py",
		"/home/tung/Python_Project/text_classifier/classifier/__init__.py",
		"/home/tung/Python_Project/text_classifier/test_data/test/test_samples.txt",
		"/home/tung/Python_Project/text_classifier/README.md",
		"/home/tung/Python_Project/text_classifier/train_data/animals/test_samples.text",
		"/home/tung/Python_Project/text_classifier/test_data.txt",
		"/home/tung/Python_Project/Bayesian_net_stock/data/data.py",
		"/home/tung/Python_Project/Bayesian_net_stock/data/stockcluster.py",
		"/home/tung/Python_Project/Bayesian_net_stock/data/data_crawler.py",
		"/home/tung/Python_Project/Bayesian_net_stock/data/data.csv",
		"/home/tung/Code/C/SocketC/src/serialization/udp_query_packet.c",
		"/home/tung/Python_Project/Bayesian_net_stock/data/test.csv",
		"/home/tung/Python_Project/Bayesian_net_stock/data/StockCluster.py",
		"/home/tung/Python_Project/Bayesian_net_stock/data/cluster_label.py",
		"/home/tung/Python_Project/Bayesian_net_stock/data/__init__.py",
		"/home/tung/Python_Project/Bayesian_net_stock/data/README.md",
		"/home/tung/Desktop/conclusion",
		"/home/tung/Python_Project/Bayesian_net_stock/data/fetch_data.py",
		"/home/tung/Python_Project/Bayesian_net_stock/fetch_data.py",
		"/home/tung/Desktop/TP4_C++/FIFOimp.cpp",
		"/home/tung/Desktop/TP4_C++/LIFOimp.cpp",
		"/home/tung/Desktop/TP4_C++/CBasePile.cpp",
		"/home/tung/Desktop/TP4_C++/CBasePile.h",
		"/home/tung/Desktop/TP4_C++/LIFOimp.h",
		"/home/tung/Desktop/TP4_C++/TP4.cpp",
		"/home/tung/Desktop/TP4_C++/CBasePile.h.gch",
		"/home/tung/Desktop/TP2/src/piledechar.cpp",
		"/home/tung/Desktop/TP4_C++/FIFOimp.h",
		"/home/tung/Desktop/TP4_C++/CBasepile.cpp",
		"/home/tung/Desktop/TP4_C++/CBasepile.h",
		"/home/tung/Desktop/TP2/src/piledechar.h",
		"/home/tung/Desktop/images.txt",
		"/home/tung/Desktop/TP2/src/FIFOimp.h",
		"/home/tung/Desktop/TP4",
		"/home/tung/Python_Project/knn_stock/src/knn.py",
		"/home/tung/Python_Project/knn_stock/src/plot_result.py",
		"/home/tung/Python_Project/knn_stock/src/fetch_data.py",
		"/home/tung/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/tung/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/tung/Python_Project/knn_stock/results",
		"/home/tung/Python_Project/mosaics/src/harris_corner.py",
		"/home/tung/Python_Project/mosaics/src/Homography.py",
		"/home/tung/Python_Project/image_warp/src/harris_corner.py",
		"/home/tung/Desktop/testcv.py",
		"/home/tung/Python_Project/knn_stock/README.md",
		"/home/tung/Python_Project/knn_stock/src/starter.py",
		"/home/tung/Python_Project/knn_stock/Dockerfile",
		"/home/tung/Python_Project/knn_stock/dev-requirements.txt",
		"/home/tung/Desktop/C++_TP/ex3.cpp",
		"/home/tung/Python_Project/knn_stock/src/server.py",
		"/home/tung/Python_Project/knn_stock/src/start_get_true_val.py",
		"/home/tung/Python_Project/knn_stock/src/start_prediction.py",
		"/home/tung/Desktop/TP2/src/tp2ex1.cpp",
		"/home/tung/Desktop/C++_TP/ex5.cpp",
		"/home/tung/Desktop/TP2/socketc.sublime-project",
		"/home/tung/Desktop/TP2/piledechar.h",
		"/home/tung/Desktop/TP2/piledechar.cpp",
		"/home/tung/Desktop/decompose.py",
		"/home/tung/Desktop/VisionOrdinateur/TP/calib_camera.m",
		"/home/tung/Desktop/VisionOrdinateur/TP/augment.m",
		"/home/tung/Desktop/VisionOrdinateur/TP/program_starter.m",
		"/home/tung/Desktop/VisionOrdinateur/TP/calibrate_first_frame.m",
		"/home/tung/Desktop/C++_TP/ex3b.cpp",
		"/home/tung/Desktop/C++_TP/ex6.cpp",
		"/home/tung/Desktop/C++_TP/ex4.cpp",
		"/home/tung/Desktop/a.cpp",
		"/home/tung/Desktop/I.A/TP1/README.md",
		"/home/tung/Desktop/server.py",
		"/home/tung/Desktop/test.py",
		"/home/tung/Python_Project/Collective_Intelligence/bayesian/bayesian.py",
		"/home/tung/Python_Project/knn_stock/bin/fetch_data.py",
		"/home/tung/Python_Project/knn_stock/knn.py",
		"/home/tung/Python_Project/Collective_Intelligence/optimisation/optimisation.py",
		"/home/tung/Python_Project/Collective_Intelligence/clustering/cluster.py",
		"/home/tung/Python_Project/Collective_Intelligence/Dockerfile",
		"/home/tung/Python_Project/knn_stock/knn",
		"/home/tung/Python_Project/Collective_Intelligence/decision_tree/tree.py",
		"/home/tung/Python_Project/Collective_Intelligence/tree.py",
		"/home/tung/Desktop/data.mat",
		"/home/tung/Desktop/VisionOrdinateur/TP/get_A.m",
		"/home/tung/Python_Project/Intelligence_Collective/bayesian/bayesian.py",
		"/home/tung/Python_Project/Intelligence_Collective/decision_tree/tree.py",
		"/home/tung/Python_Project/exercice-python/dev-requirements.txt",
		"/home/tung/Python_Project/Intelligence_Collective/dev-requirements.txt",
		"/home/tung/Python_Project/exercice-python/Dockerfile",
		"/home/tung/Python_Project/Intelligence_Collective/decision_tree/tree",
		"/home/tung/Python_Project/exercice-python/recommendations.py",
		"/home/tung/Python_Project/Intelligence_Collective/Dockerfile",
		"/home/tung/Python_Project/Intelligence_Collective/clustering/cluster.py",
		"/home/tung/Python_Project/Intelligence_Collective/optimisation/optimisation.py",
		"/home/tung/Python_Project/Intelligence_Collective/README.md",
		"/home/tung/Python_Project/Intelligence_Collective/decouvrir_groupe/cluster.py",
		"/home/tung/Python_Project/Intelligence_Collective/optimisation/schedule.txt",
		"/home/tung/Python_Project/Intelligence_Collective/decouvrir_groupe/clustering_result.jpg",
		"/home/tung/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/tung/Python_Project/Intelligence_Collective/decouvrir_groupe/blogdata.txt",
		"/home/tung/Python_Project/Intelligence_Collective/decouvrir_groupe/Dockerfile",
		"/home/tung/Python_Project/Intelligence_Collective/decouvrir_groupe/readfile.py",
		"/home/tung/Python_Project/PythonSocket/Dockerfile"
	],
	"find":
	{
		"height": 31.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
			"~/Code/C/SocketC/src, *.c,  *.h",
			"~/Code/C/SocketC,*.c, *.h",
			"~/Code/C/SocketC",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"    	",
			"content",
			"link",
			"href",
			"content",
			"title",
			"tfidf_transformer",
			"sci",
			"import",
			"	\n",
			"b_est",
			"focus",
			"float",
			"close_point_shifted_right",
			"print",
			"catlist",
			"count_total",
			"pprint",
			"Image",
			"range",
			"predict",
			"similarity",
			"close",
			"SRAM",
			"power",
			"TIMER1",
			"Led_MOde",
			"Led_Mode",
			"bleu",
			"FreqClock",
			"stop",
			"SysCtlSleep",
			"LED_Mode",
			"rouge",
			"log",
			"fork",
			"emer",
			"breaking_signal",
			"MCR",
			"MCE",
			"UDP",
			"log.h",
			"tcp_query_packet.h",
			"tcp_query_packet.o",
			"tcpserver.o",
			"OBJS1",
			"sock_server",
			"udpserver.o",
			"tcp_query_packet",
			"i",
			"UDP",
			"start",
			"free",
			"buffer2",
			"mall",
			"free",
			"buffer",
			"rejectconne",
			"reject",
			"free",
			"fork",
			"breaking",
			"send",
			"port",
			"printf",
			"communi",
			"IP",
			"buff",
			"send",
			"free",
			"seriali",
			"free",
			"server",
			"inet",
			"free",
			"malloc",
			"serial",
			"malloc",
			"seria",
			"seriali",
			"buf",
			"malloc",
			"buffer",
			"malloc",
			"seri",
			"seriali",
			"serialize",
			"seria",
			"malloc",
			"maloc",
			"client_addr",
			"H1",
			"H2",
			"cmp",
			"malloc",
			"res",
			"buf",
			"sizecheck",
			"completed",
			"error or",
			"authori",
			"socket wri",
			"sizecheck",
			"generate",
			"getpass",
			"free",
			"printf",
			"incoming",
			"buff_size",
			"verification",
			"verify",
			"^(.*)$",
			"size",
			"printf",
			"struct",
			"printf",
			"main",
			"recv",
			"tm",
			"len",
			"response",
			"buff",
			"buff_size",
			"verifier",
			"pickle",
			"compare",
			"\")\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "classifier/bayesian_naive.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1636,
						"regions":
						{
						},
						"selection":
						[
							[
								1430,
								1430
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 786.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 567,
						"regions":
						{
						},
						"selection":
						[
							[
								566,
								566
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/tung/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 197,
						"regions":
						{
						},
						"selection":
						[
							[
								196,
								196
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.cc":
	{
		"height": 124.0
	},
	"output.exec":
	{
		"height": 149.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Anaconda Python Builder",
	"project": "text_classifier.sublime-project",
	"replace":
	{
		"height": 58.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 550.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Code/C++/TP1_S2/TP1_S2.sublime-project"
			]
		],
		"width": 418.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 229.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
